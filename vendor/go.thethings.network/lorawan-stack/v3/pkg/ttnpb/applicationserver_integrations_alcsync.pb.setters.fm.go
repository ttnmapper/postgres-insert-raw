// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

func (dst *ALCSyncCommand) SetFields(src *ALCSyncCommand, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "cid":
			if len(subs) > 0 {
				return fmt.Errorf("'cid' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Cid = src.Cid
			} else {
				dst.Cid = 0
			}

		case "payload":
			if len(subs) == 0 && src == nil {
				dst.Payload = nil
				continue
			} else if len(subs) == 0 {
				dst.Payload = src.Payload
				continue
			}

			subPathMap := _processPaths(subs)
			if len(subPathMap) > 1 {
				return fmt.Errorf("more than one field specified for oneof field '%s'", name)
			}
			for oneofName, oneofSubs := range subPathMap {
				switch oneofName {
				case "app_time_req":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.Payload.(*ALCSyncCommand_AppTimeReq_)
					}
					if srcValid := srcTypeOk || src == nil || src.Payload == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'app_time_req', while different oneof is set in source")
					}
					_, dstTypeOk := dst.Payload.(*ALCSyncCommand_AppTimeReq_)
					if dstValid := dstTypeOk || dst.Payload == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'app_time_req', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *ALCSyncCommand_AppTimeReq
						if srcTypeOk {
							newSrc = src.Payload.(*ALCSyncCommand_AppTimeReq_).AppTimeReq
						}
						if dstTypeOk {
							newDst = dst.Payload.(*ALCSyncCommand_AppTimeReq_).AppTimeReq
						} else if srcTypeOk {
							newDst = &ALCSyncCommand_AppTimeReq{}
							dst.Payload = &ALCSyncCommand_AppTimeReq_{AppTimeReq: newDst}
						} else {
							dst.Payload = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.Payload = src.Payload
						} else {
							dst.Payload = nil
						}
					}
				case "app_time_ans":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.Payload.(*ALCSyncCommand_AppTimeAns_)
					}
					if srcValid := srcTypeOk || src == nil || src.Payload == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'app_time_ans', while different oneof is set in source")
					}
					_, dstTypeOk := dst.Payload.(*ALCSyncCommand_AppTimeAns_)
					if dstValid := dstTypeOk || dst.Payload == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'app_time_ans', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *ALCSyncCommand_AppTimeAns
						if srcTypeOk {
							newSrc = src.Payload.(*ALCSyncCommand_AppTimeAns_).AppTimeAns
						}
						if dstTypeOk {
							newDst = dst.Payload.(*ALCSyncCommand_AppTimeAns_).AppTimeAns
						} else if srcTypeOk {
							newDst = &ALCSyncCommand_AppTimeAns{}
							dst.Payload = &ALCSyncCommand_AppTimeAns_{AppTimeAns: newDst}
						} else {
							dst.Payload = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.Payload = src.Payload
						} else {
							dst.Payload = nil
						}
					}

				default:
					return fmt.Errorf("invalid oneof field: '%s.%s'", name, oneofName)
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ALCSyncCommand_AppTimeReq) SetFields(src *ALCSyncCommand_AppTimeReq, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "DeviceTime":
			if len(subs) > 0 {
				return fmt.Errorf("'DeviceTime' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DeviceTime = src.DeviceTime
			} else {
				dst.DeviceTime = nil
			}
		case "TokenReq":
			if len(subs) > 0 {
				return fmt.Errorf("'TokenReq' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.TokenReq = src.TokenReq
			} else {
				var zero uint32
				dst.TokenReq = zero
			}
		case "AnsRequired":
			if len(subs) > 0 {
				return fmt.Errorf("'AnsRequired' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.AnsRequired = src.AnsRequired
			} else {
				var zero bool
				dst.AnsRequired = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ALCSyncCommand_AppTimeAns) SetFields(src *ALCSyncCommand_AppTimeAns, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "TimeCorrection":
			if len(subs) > 0 {
				return fmt.Errorf("'TimeCorrection' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.TimeCorrection = src.TimeCorrection
			} else {
				var zero int32
				dst.TimeCorrection = zero
			}
		case "TokenAns":
			if len(subs) > 0 {
				return fmt.Errorf("'TokenAns' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.TokenAns = src.TokenAns
			} else {
				var zero uint32
				dst.TokenAns = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
